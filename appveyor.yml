environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    # For Python versions available on Appveyor, see
    # https://www.appveyor.com/docs/windows-images-software/#python
    #- PYTHON: "C:\\Python27"
    - PYTHON: "C:\\Python37"
    #- PYTHON: "C:\\Python27-x64"
    - PYTHON: "C:\\Python37-x64"

install:
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "%PYTHON%\\python.exe -m pip install --upgrade pip wheel coverage"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "%PYTHON%\\python.exe -m pip install pipenv"
  - "pipenv install -r requirements.txt --skip-lock" # --dev --skip-lock"
  - "pipenv install -e . --skip-lock"
  # pipenv will use requirements.txt

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  # - pip install -r requirements.txt

build: off
  # build step is needed for other languages, not for python

test_script:
  # Run the project tests and store results in .xml log
  # this produces nosetests.xml which is uploaded on_finish
  # &$env:PYTHON\python setup.py nosetests --with-xunit
  # - ps: | --- this runs in powershell, which continues on errors.
  #    "pipenv run setup.py test"
  #    "pipenv run coverage run setup.py test"
  #    "pipenv run coverage report"
  #    "pipenv run coverage xml"
  #    #"pipenv run coverage html"
  - pipenv run coverage run setup.py test
  - dir
  - pipenv run coverage report
  - pipenv run coverage html
  
artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  # - path: dist\*
  - path: htmlcov


#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

#on_finish:
#  Upload test results to AppVeyor

#on_success:
